# Convert the differnt audio formats into .wav format 
import subprocess, os
os.chdir(r'D:\STT\src') 

# audio file formats are converted using ffmpeg tool
# set the path where the executable (.exe) file is located
# download ffmpeg build from https://ffmpeg.zeranoe.com/builds/ and place it in your project folder
# ffmpeg source code is available at https://www.ffmpeg.org/download.html
FFMPEG_PATH = r'D:\STT\ffmpeg\bin\ffmpeg'

import glob

# Below is the folder structure for audio files. Multiple speakers each having individual folder of his/her recordings
# recordings
#   - speaker 1
#   - speaker 2
#   - ...

# set the path where audio files are located
folder_path = r'..\data\recordings'
for speaker_folder in glob.glob(folder_path + "/*"):
    speaker = speaker_folder.split("\\")[-1]
    print(speaker)
    for file in glob.glob(speaker_folder + "/*"):        
        file_name = file.split("\\")[-1].split(".")[0]        
        # output file name
        output_file_name = folder_path + '\\' + speaker + '_' + file_name + '.wav'                
        print(output_file_name)        
        # ffmpeg command to convert the audio file format
        command = [FFMPEG_PATH, '-i', file,output_file_name]
        subprocess.call(command)
        
################### All files converted to .wav fomrat #########################

################### Generate transcript from this audio files ##################
import time
import azure.cognitiveservices.speech as speechsdk

# configure API keys and service region
speech_key, service_region = "53f0b034226a41c18e8ab5639604b74f", "centralindia"
# configure speechadk object
speech_config = speechsdk.SpeechConfig(subscription=speech_key, region=service_region)

# create an empty output 
output = ""

def combine_text(evt):       
    """ this function will combine the transcript that is generated by multiple utterances/sentences 
    from a audio file"""
    global output
    output = output + evt.result.text
    print(evt.result.text)

def speech_recognize_continuous_from_file():
    """performs continuous speech recognition with input from an audio file"""
    done = False

    def stop_cb(evt):
        """callback that stops continuous recognition upon receiving an event `evt`"""        
        speech_recognizer.stop_continuous_recognition()
        nonlocal done
        done = True

    speech_recognizer.recognized.connect(lambda evt: combine_text(evt))    
    speech_recognizer.session_stopped.connect(stop_cb)
    speech_recognizer.canceled.connect(stop_cb)
    # Start continuous speech recognition
    speech_recognizer.start_continuous_recognition()
    while not done:
        time.sleep(.5)

# get a list of files that have the extension wav
filelist = filter(lambda f: f.split('.')[-1] in ['wav'], os.listdir(folder_path))
filelist = sorted(filelist)    
# generate transcript for each file
for file in filelist:
    audio_config = speechsdk.audio.AudioConfig(filename=folder_path+"\\"+file)    
    speech_recognizer = speechsdk.SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)
    speech_recognize_continuous_from_file()
    # save the transcript to a text file
    f= open(r'..\data\recordings\\'+file.split(".")[0] +".txt","w+")
    f.write(output)
    f.close() 
    # reset the output to blank for next file
    output = ""
